name: Build and Deploy

on:
  push:
    branches:
      - master  
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8' 

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install transformers torch

    - name: Run Rust tests
      run: cargo test


  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: raplis/rust_ml_service:latest
        

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to EC2
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: ${{secrets.EC2_PUBLIC_IP}}
        USER: ubuntu
      run: |
        # Install SSH client
        sudo apt-get update
        sudo apt-get install -y openssh-client

        # Start SSH agent
        eval "$(ssh-agent -s)"
        
        # Add SSH key
        ssh-add <(echo "$SSH_KEY")
        
        # Disable SSH host key checking
        mkdir -p ~/.ssh
        echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

        ssh $USER@$HOST "kubectl apply -f k8s/deployment.yaml && \
                        kubectl apply -f k8s/service.yaml && \
                        sleep 40 && \
                        kubectl get services"
        echo "Deployment successful."














# kubectl delete deployment rust-ml-service-deployment && \
#                         kubectl delete service rust-ml-service && \
                        
  #  - name: Update Deployment Image
  #     run: |
  #       # check whether the aws credentials are working
  #       ssh $USER@$HOST
  #       kubectl set image deployment/rust-ml-service rust-ml-service=raplis/rust_ml_service:latest
  #     shell: /usr/bin/bash -e {0}
    # - name: Set up Kubectl
    #   uses: azure/setup-kubectl@v3
    #   with:
    #     version: 'latest'

    # - name: Configure Kubeconfig
    #   run: |
    #     mkdir -p ${HOME}/.kube
    #     echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ${HOME}/.kube/config

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1
    #   run: |
    #   echo "AWS credentials configured."

 


    #     # SSH to EC2 instance and pull latest Docker image
    #     ssh $USER@$HOST "docker pull raplis/rust_ml_service:latest && \
    #                         docker stop rust_ml_service_container || true && \
    #                         docker rm rust_ml_service_container || true && \
    #                         docker run -d --name rust_ml_service_container -p 8080:8080 raplis/rust_ml_service:latest"